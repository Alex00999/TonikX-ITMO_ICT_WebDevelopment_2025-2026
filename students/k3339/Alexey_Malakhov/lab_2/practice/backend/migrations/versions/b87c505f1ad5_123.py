"""123

Revision ID: b87c505f1ad5
Revises: 040cb95fd40e
Create Date: 2025-09-29 22:55:52.549878

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b87c505f1ad5'
down_revision: Union[str, Sequence[str], None] = '040cb95fd40e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('driver_licenses')
    op.drop_table('ownerships')
    op.drop_table('owners')
    op.drop_table('cars')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'cars',
        sa.Column(
            'id_car',
            sa.INTEGER(),
            server_default=sa.text("nextval('cars_id_car_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column('plate', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
        sa.Column('make', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column('model', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column('color', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('id_car', name='cars_pkey'),
        sa.UniqueConstraint('plate', name='cars_plate_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        'driver_licenses',
        sa.Column('id_license', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('id_owner', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('license_number', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column('type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column('issue_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ['id_owner'], ['owners.id_owner'], name=op.f('driver_licenses_id_owner_fkey'), ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id_license', name=op.f('driver_licenses_pkey')),
        sa.UniqueConstraint(
            'license_number',
            name=op.f('driver_licenses_license_number_key'),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        'owners',
        sa.Column(
            'id_owner',
            sa.INTEGER(),
            server_default=sa.text("nextval('owners_id_owner_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column('last_name', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
        sa.Column('first_name', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
        sa.Column('birth_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id_owner', name='owners_pkey'),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        'ownerships',
        sa.Column('id_owner_car', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('id_owner', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('id_car', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['id_car'], ['cars.id_car'], name=op.f('ownerships_id_car_fkey'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(
            ['id_owner'], ['owners.id_owner'], name=op.f('ownerships_id_owner_fkey'), ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id_owner_car', name=op.f('ownerships_pkey')),
        sa.UniqueConstraint(
            'id_owner',
            'id_car',
            'start_date',
            name=op.f('uq_owner_car_start'),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    # ### end Alembic commands ###
